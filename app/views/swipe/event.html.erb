<div class="dating-app-container">
  <!-- Header with back button -->
  <div class="app-header">
    <%= link_to swipe_path, class: "back-button" do %>
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
        <polyline points="15,18 9,12 15,6"/>
      </svg>
    <% end %>
    
    <div class="header-title">
      <h2><%= @event.title %></h2>
    </div>
    
    <div class="placeholder"></div>
  </div>

  <!-- People Dating Cards -->
  <div id="people-mode" class="swipe-mode active">
    <% if @users_to_swipe.any? %>
      <div class="dating-cards-stack">
        <% @users_to_swipe.each_with_index do |user, index| %>
          <div class="dating-card" data-user-id="<%= user.id %>" data-index="<%= index %>">
            <!-- Profile Photo Section -->
            <div class="profile-photo-section">
              <div class="profile-photo">
                <div class="avatar-photo">
                  <%= user.first_name.first.upcase %><%= user.last_name.first.upcase %>
                </div>
                <div class="photo-indicators">
                  <div class="indicator active"></div>
                  <div class="indicator"></div>
                  <div class="indicator"></div>
                </div>
              </div>
            </div>

            <!-- Profile Info Overlay -->
            <div class="profile-overlay">
              <div class="basic-info">
                <h1><%= user.first_name %> <span class="age"><%= user.age || '24' %></span></h1>
                <div class="location">
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"/>
                    <circle cx="12" cy="10" r="3"/>
                  </svg>
                  <%= user.location_display %>
                </div>
              </div>

              <!-- Detailed Profile Section -->
              <div class="profile-details">
                <div class="scroll-indicator">
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <polyline points="7,13 12,18 17,13"/>
                  </svg>
                  <span>Tap to see more</span>
                </div>
                
                <div class="details-content">
                  <!-- Bio Section -->
                  <% if user.bio.present? %>
                    <div class="profile-section">
                      <h3>About <%= user.first_name %></h3>
                      <p><%= user.bio %></p>
                    </div>
                  <% end %>

                  <!-- Interests -->
                  <% if user.interests_array.any? %>
                    <div class="profile-section">
                      <h3>Interests</h3>
                      <div class="interest-tags">
                        <% user.interests_array.each do |interest| %>
                          <span class="interest-tag"><%= interest %></span>
                        <% end %>
                      </div>
                    </div>
                  <% else %>
                    <div class="profile-section">
                      <h3>Interests</h3>
                      <div class="interest-tags">
                        <span class="interest-tag">üéµ Music</span>
                        <span class="interest-tag">üèÉ‚Äç‚ôÇÔ∏è Running</span>
                        <span class="interest-tag">üìö Reading</span>
                        <span class="interest-tag">‚úàÔ∏è Travel</span>
                        <span class="interest-tag">üçï Food</span>
                      </div>
                    </div>
                  <% end %>

                  <!-- Event Connection -->
                  <div class="profile-section">
                    <h3>Event Connection</h3>
                    <div class="event-connection">
                      <div class="connection-badge">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                          <rect x="3" y="4" width="18" height="18" rx="2" ry="2"/>
                          <line x1="16" y1="2" x2="16" y2="6"/>
                          <line x1="8" y1="2" x2="8" y2="6"/>
                          <line x1="3" y1="10" x2="21" y2="10"/>
                        </svg>
                        <span>Going to <%= @event.title %></span>
                      </div>
                    </div>
                  </div>

                  <!-- Professional Info -->
                  <div class="profile-section">
                    <h3>Quick Facts</h3>
                    <div class="fact-list">
                      <% if user.education.present? %>
                        <div class="fact-item">
                          <span class="fact-icon">üéì</span>
                          <span><%= user.education %></span>
                        </div>
                      <% end %>
                      <% if user.occupation.present? %>
                        <div class="fact-item">
                          <span class="fact-icon">üíº</span>
                          <span><%= user.occupation %></span>
                        </div>
                      <% end %>
                      <% if user.height.present? %>
                        <div class="fact-item">
                          <span class="fact-icon">üìè</span>
                          <span><%= user.height %></span>
                        </div>
                      <% end %>
                      <% if user.city.present? %>
                        <div class="fact-item">
                          <span class="fact-icon">üìç</span>
                          <span>Lives in <%= user.city %></span>
                        </div>
                      <% end %>
                      <div class="fact-item">
                        <span class="fact-icon">üåü</span>
                        <span>Profile <%= user.profile_completion_percentage %>% complete</span>
                      </div>
                    </div>
                  </div>

                  <!-- Photos Grid -->
                  <% if user.photos_array.length > 1 %>
                    <div class="profile-section">
                      <h3>More Photos</h3>
                      <div class="photos-grid">
                        <% user.photos_array[1..3].each_with_index do |photo, index| %>
                          <div class="photo-item">
                            <div class="photo-placeholder">
                              <%= index + 2 %>
                            </div>
                          </div>
                        <% end %>
                        <% if user.photos_array.length > 4 %>
                          <div class="photo-item">
                            <div class="photo-placeholder">
                              +<%= user.photos_array.length - 4 %>
                            </div>
                          </div>
                        <% end %>
                      </div>
                    </div>
                  <% end %>
                </div>
              </div>
            </div>

            <!-- Action Buttons -->
            <div class="action-buttons">
              <button class="action-btn pass-btn">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <line x1="18" y1="6" x2="6" y2="18"/>
                  <line x1="6" y1="6" x2="18" y2="18"/>
                </svg>
              </button>
              
              <button class="action-btn super-like-btn">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <polygon points="12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26"/>
                </svg>
              </button>
              
              <button class="action-btn like-btn">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
                </svg>
              </button>
            </div>
          </div>
        <% end %>
      </div>
      
      <!-- Swipe Indicators -->
      <div class="swipe-indicators">
        <div class="swipe-indicator pass">NOPE</div>
        <div class="swipe-indicator super-like">SUPER LIKE</div>
        <div class="swipe-indicator like">LIKE</div>
      </div>
    <% else %>
      <div class="empty-state">
        <div class="empty-illustration">
          <svg viewBox="0 0 200 200" fill="none">
            <circle cx="100" cy="100" r="80" stroke="#E5E7EB" stroke-width="2" fill="#F9FAFB"/>
            <path d="M70 85 Q100 65 130 85" stroke="#9CA3AF" stroke-width="2" fill="none"/>
            <circle cx="85" cy="90" r="3" fill="#9CA3AF"/>
            <circle cx="115" cy="90" r="3" fill="#9CA3AF"/>
            <path d="M85 110 Q100 120 115 110" stroke="#9CA3AF" stroke-width="2" fill="none"/>
          </svg>
        </div>
        <h2>That's everyone!</h2>
        <p>You've seen all the people attending this event. Check back later for new attendees!</p>
        <%= link_to "Browse Other Events", events_path, class: "btn btn-primary" %>
      </div>
    <% end %>
  </div>
</div>

<!-- Match Modal -->
<div id="matchModal" class="match-modal">
  <div class="match-content">
    <div class="match-animation">
      <div class="heart-burst">üíñ</div>
      <h2>It's a Match!</h2>
      <p>You and <span id="matchedUserName"></span> liked each other at <%= @event.title %>!</p>
    </div>
    <div class="match-actions">
      <button id="keepSwiping" class="btn-secondary">Keep Swiping</button>
      <button id="sendMessage" class="btn-primary">Send Message</button>
    </div>
  </div>
</div>

<style>
  .dating-app-container {
    min-height: 100vh;
    background: linear-gradient(135deg, #f8fafc 0%, #ffffff 100%);
    position: relative;
    overflow: hidden;
  }

  .app-header {
    position: sticky;
    top: 0;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    border-bottom: 1px solid #e5e7eb;
    padding: 1rem 1.5rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    z-index: 100;
  }

  .back-button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 44px;
    height: 44px;
    background: #f3f4f6;
    border: none;
    border-radius: 50%;
    color: #374151;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
  }

  .back-button:hover {
    background: #e5e7eb;
    transform: scale(1.05);
  }

  .back-button svg {
    width: 20px;
    height: 20px;
  }

  .header-title {
    flex: 1;
    text-align: center;
  }

  .placeholder {
    width: 44px;
  }

  /* Dating Cards */
  .swipe-mode {
    display: none;
    padding: 1rem;
    height: calc(100vh - 80px);
    position: relative;
  }

  .swipe-mode.active {
    display: block;
  }

  .dating-cards-stack {
    position: relative;
    width: 100%;
    max-width: 400px;
    height: 100%;
    margin: 0 auto;
    perspective: 1000px;
  }

  .dating-card {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 80px;
    background: #ffffff;
    border-radius: 20px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
    overflow: hidden;
    cursor: grab;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    transform-origin: center;
    user-select: none;
  }

  .dating-card:active {
    cursor: grabbing;
  }

  .dating-card:not(:last-child) {
    transform: scale(0.95) translateY(10px);
    opacity: 0.7;
    z-index: 1;
  }

  .dating-card:nth-last-child(2) {
    transform: scale(0.98) translateY(5px);
    opacity: 0.85;
    z-index: 2;
  }

  .dating-card:last-child {
    z-index: 3;
  }

  /* Profile Photo Section */
  .profile-photo-section {
    height: 60%;
    background: linear-gradient(135deg, #ff6b6b 0%, #feca57 100%);
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }

  .profile-photo {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .avatar-photo {
    width: 120px;
    height: 120px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2.5rem;
    font-weight: 700;
    color: #ffffff;
    backdrop-filter: blur(10px);
    border: 4px solid rgba(255, 255, 255, 0.3);
  }

  .photo-indicators {
    position: absolute;
    top: 16px;
    left: 16px;
    right: 16px;
    display: flex;
    gap: 4px;
  }

  .photo-indicators .indicator {
    flex: 1;
    height: 3px;
    background: rgba(255, 255, 255, 0.3);
    border-radius: 2px;
    transition: all 0.3s ease;
  }

  .photo-indicators .indicator.active {
    background: #ffffff;
  }

  /* Profile Overlay */
  .profile-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 45%;
    background: linear-gradient(to top, #ffffff 70%, rgba(255, 255, 255, 0) 100%);
    padding: 2rem 1.5rem 1rem;
    overflow-y: auto;
  }

  .basic-info {
    margin-bottom: 1.5rem;
  }

  .basic-info h1 {
    font-size: 2rem;
    font-weight: 700;
    color: #111827;
    margin-bottom: 0.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .age {
    background: #111827;
    color: #ffffff;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 1rem;
    font-weight: 600;
  }

  .location {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #6b7280;
    font-size: 0.9rem;
    font-weight: 500;
  }

  .location svg {
    width: 16px;
    height: 16px;
  }

  .profile-details {
    position: relative;
  }

  .scroll-indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    color: #9ca3af;
    font-size: 0.8rem;
    margin-bottom: 1rem;
    opacity: 0.7;
  }

  .scroll-indicator svg {
    width: 16px;
    height: 16px;
    animation: bounce 2s infinite;
  }

  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-4px); }
    60% { transform: translateY(-2px); }
  }

  .details-content {
    max-height: 200px;
    overflow-y: auto;
    padding-right: 0.5rem;
  }

  .details-content::-webkit-scrollbar {
    width: 3px;
  }

  .details-content::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 10px;
  }

  .details-content::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 10px;
  }

  .profile-section {
    margin-bottom: 1.5rem;
  }

  .profile-section h3 {
    font-size: 1.1rem;
    font-weight: 600;
    color: #111827;
    margin-bottom: 0.75rem;
  }

  .profile-section p {
    color: #4b5563;
    line-height: 1.5;
    font-size: 0.9rem;
  }

  .interest-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .interest-tag {
    background: #f1f5f9;
    color: #374151;
    padding: 0.5rem 0.75rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
    border: 1px solid #e2e8f0;
  }

  .connection-badge {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    background: #fef3c7;
    border: 1px solid #fbbf24;
    border-radius: 12px;
    color: #92400e;
    font-size: 0.85rem;
    font-weight: 600;
  }

  .connection-badge svg {
    width: 18px;
    height: 18px;
  }

  .fact-list {
    space-y: 0.5rem;
  }

  .fact-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.5rem 0;
    font-size: 0.9rem;
    color: #4b5563;
  }

  .fact-icon {
    font-size: 1.2rem;
  }

  .photos-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.5rem;
  }

  .photo-item {
    aspect-ratio: 1;
    border-radius: 8px;
    overflow: hidden;
  }

  .photo-placeholder {
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #e2e8f0 0%, #cbd5e1 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    color: #64748b;
    font-size: 1.2rem;
  }

  /* Action Buttons */
  .action-buttons {
    position: absolute;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 1rem;
    z-index: 10;
  }

  .action-btn {
    width: 60px;
    height: 60px;
    border: none;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
  }

  .action-btn:hover {
    transform: scale(1.1);
  }

  .action-btn:active {
    transform: scale(0.95);
  }

  .action-btn svg {
    width: 24px;
    height: 24px;
  }

  .pass-btn {
    background: #ffffff;
    color: #ef4444;
    border: 2px solid #fee2e2;
  }

  .pass-btn:hover {
    background: #fef2f2;
    border-color: #fecaca;
  }

  .super-like-btn {
    background: #3b82f6;
    color: #ffffff;
    border: 2px solid #3b82f6;
    width: 50px;
    height: 50px;
  }

  .super-like-btn:hover {
    background: #2563eb;
    border-color: #2563eb;
  }

  .super-like-btn svg {
    width: 20px;
    height: 20px;
  }

  .like-btn, .join-btn {
    background: #10b981;
    color: #ffffff;
    border: 2px solid #10b981;
  }

  .like-btn:hover, .join-btn:hover {
    background: #059669;
    border-color: #059669;
  }

  /* Swipe Indicators */
  .swipe-indicators {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    pointer-events: none;
    z-index: 1000;
  }

  .swipe-indicator {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    padding: 1rem 2rem;
    border-radius: 12px;
    font-weight: 700;
    font-size: 1.2rem;
    opacity: 0;
    transition: all 0.3s ease;
    pointer-events: none;
  }

  .swipe-indicator.pass {
    background: rgba(239, 68, 68, 0.9);
    color: #ffffff;
    border: 3px solid #ef4444;
    transform: translate(-50%, -50%) rotate(-30deg);
  }

  .swipe-indicator.super-like {
    background: rgba(59, 130, 246, 0.9);
    color: #ffffff;
    border: 3px solid #3b82f6;
    transform: translate(-50%, -150%) rotate(0deg);
  }

  .swipe-indicator.like {
    background: rgba(16, 185, 129, 0.9);
    color: #ffffff;
    border: 3px solid #10b981;
    transform: translate(-50%, -50%) rotate(30deg);
  }

  /* Empty State */
  .empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    text-align: center;
    padding: 2rem;
  }

  .empty-illustration {
    width: 120px;
    height: 120px;
    margin-bottom: 2rem;
    opacity: 0.6;
  }

  .empty-state h2 {
    font-size: 1.5rem;
    font-weight: 700;
    color: #111827;
    margin-bottom: 0.5rem;
  }

  .empty-state p {
    color: #6b7280;
    margin-bottom: 2rem;
    max-width: 300px;
    line-height: 1.5;
  }

  .switch-mode-btn, .create-group-btn {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: #ffffff;
    padding: 0.75rem 2rem;
    border: none;
    border-radius: 25px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-block;
  }

  .switch-mode-btn:hover, .create-group-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  }

  /* Match Modal */
  .match-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    z-index: 2000;
    animation: fadeIn 0.3s ease;
  }

  .match-modal.show {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .match-content {
    background: #ffffff;
    border-radius: 20px;
    padding: 3rem 2rem;
    margin: 1rem;
    max-width: 400px;
    width: 100%;
    text-align: center;
    animation: slideInUp 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .match-animation {
    margin-bottom: 2rem;
  }

  .heart-burst {
    font-size: 4rem;
    margin-bottom: 1rem;
    animation: heartPulse 1s ease infinite;
  }

  @keyframes heartPulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.1); }
  }

  .match-content h2 {
    font-size: 2rem;
    font-weight: 700;
    color: #111827;
    margin-bottom: 0.5rem;
  }

  .match-content p {
    color: #6b7280;
    margin-bottom: 2rem;
    line-height: 1.5;
  }

  .match-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
  }

  .btn-secondary, .btn-primary {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 12px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    min-width: 120px;
  }

  .btn-secondary {
    background: #f3f4f6;
    color: #6b7280;
  }

  .btn-secondary:hover {
    background: #e5e7eb;
  }

  .btn-primary {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    color: #ffffff;
  }

  .btn-primary:hover {
    transform: translateY(-1px);
    box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(50px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .app-header {
      padding: 1rem;
    }

    .dating-cards-stack {
      max-width: 350px;
    }

    .action-buttons {
      gap: 0.75rem;
    }

    .action-btn {
      width: 55px;
      height: 55px;
    }

    .super-like-btn {
      width: 45px;
      height: 45px;
    }

    .match-content {
      padding: 2rem 1.5rem;
    }

    .match-actions {
      flex-direction: column;
    }
  }

  @media (max-width: 480px) {
    .dating-cards-stack {
      max-width: 320px;
    }

    .profile-overlay {
      padding: 1.5rem 1rem 1rem;
    }

    .basic-info h1 {
      font-size: 1.75rem;
    }

    .action-btn {
      width: 50px;
      height: 50px;
    }

    .action-btn svg {
      width: 20px;
      height: 20px;
    }

    .super-like-btn {
      width: 40px;
      height: 40px;
    }

    .super-like-btn svg {
      width: 16px;
      height: 16px;
    }
  }
</style>

<script>
  let currentCardIndex = 0;
  let currentMode = 'people';
  let isDragging = false;
  let startX = 0;
  let startY = 0;
  let currentX = 0;
  let currentY = 0;

  document.addEventListener('DOMContentLoaded', function() {
    initializeSwipe();
  });

  function initializeSwipe() {
    const cards = getCurrentCards();
    if (cards.length === 0) return;

    cards.forEach((card, index) => {
      if (index < currentCardIndex) {
        card.style.display = 'none';
        return;
      }

      card.style.display = 'block';
      setupCardEvents(card);
      updateCardPosition(card, index - currentCardIndex);
    });
  }

  function getCurrentCards() {
    const activeMode = document.querySelector('.swipe-mode.active');
    return activeMode ? Array.from(activeMode.querySelectorAll('.dating-card')) : [];
  }

  function setupCardEvents(card) {
    // Touch events
    card.addEventListener('touchstart', handleTouchStart, { passive: false });
    card.addEventListener('touchmove', handleTouchMove, { passive: false });
    card.addEventListener('touchend', handleTouchEnd);

    // Mouse events
    card.addEventListener('mousedown', handleMouseDown);
    card.addEventListener('mousemove', handleMouseMove);
    card.addEventListener('mouseup', handleMouseUp);
    card.addEventListener('mouseleave', handleMouseUp);

    // Button events
    const passBtn = card.querySelector('.pass-btn');
    const superLikeBtn = card.querySelector('.super-like-btn');
    const likeBtn = card.querySelector('.like-btn, .join-btn');

    if (passBtn) {
      passBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        handleSwipe('pass');
      });
    }

    if (superLikeBtn && currentMode === 'people') {
      superLikeBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        handleSwipe('super-like');
      });
    }

    if (likeBtn) {
      likeBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        handleSwipe(currentMode === 'people' ? 'like' : 'join');
      });
    }
  }

  function handleTouchStart(e) {
    startX = e.touches[0].clientX;
    startY = e.touches[0].clientY;
    isDragging = true;
  }

  function handleTouchMove(e) {
    if (!isDragging) return;
    e.preventDefault();

    currentX = e.touches[0].clientX - startX;
    currentY = e.touches[0].clientY - startY;

    updateCardDrag(e.target.closest('.dating-card'));
  }

  function handleTouchEnd(e) {
    if (!isDragging) return;
    isDragging = false;

    const card = e.target.closest('.dating-card');
    handleDragEnd(card);
  }

  function handleMouseDown(e) {
    startX = e.clientX;
    startY = e.clientY;
    isDragging = true;
    e.preventDefault();
  }

  function handleMouseMove(e) {
    if (!isDragging) return;

    currentX = e.clientX - startX;
    currentY = e.clientY - startY;

    updateCardDrag(e.target.closest('.dating-card'));
  }

  function handleMouseUp(e) {
    if (!isDragging) return;
    isDragging = false;

    const card = e.target.closest('.dating-card');
    handleDragEnd(card);
  }

  function updateCardDrag(card) {
    if (!card) return;

    const rotation = currentX * 0.1;
    const opacity = Math.max(0.5, 1 - Math.abs(currentX) / 300);

    card.style.transform = `translate(${currentX}px, ${currentY}px) rotate(${rotation}deg)`;
    card.style.opacity = opacity;

    // Show indicators
    const passIndicator = document.querySelector('.swipe-indicator.pass');
    const likeIndicator = document.querySelector('.swipe-indicator.like');
    const superLikeIndicator = document.querySelector('.swipe-indicator.super-like');

    if (currentX < -50) {
      if (passIndicator) passIndicator.style.opacity = Math.min(1, Math.abs(currentX) / 150);
      if (likeIndicator) likeIndicator.style.opacity = 0;
      if (superLikeIndicator) superLikeIndicator.style.opacity = 0;
    } else if (currentX > 50) {
      if (likeIndicator) likeIndicator.style.opacity = Math.min(1, currentX / 150);
      if (passIndicator) passIndicator.style.opacity = 0;
      if (superLikeIndicator) superLikeIndicator.style.opacity = 0;
    } else if (currentY < -50 && currentMode === 'people') {
      if (superLikeIndicator) superLikeIndicator.style.opacity = Math.min(1, Math.abs(currentY) / 150);
      if (passIndicator) passIndicator.style.opacity = 0;
      if (likeIndicator) likeIndicator.style.opacity = 0;
    } else {
      if (passIndicator) passIndicator.style.opacity = 0;
      if (likeIndicator) likeIndicator.style.opacity = 0;
      if (superLikeIndicator) superLikeIndicator.style.opacity = 0;
    }
  }

  function handleDragEnd(card) {
    if (!card) return;

    const threshold = 100;
    let action;
    
    if (Math.abs(currentX) > threshold) {
      action = currentX < 0 ? 'pass' : (currentMode === 'people' ? 'like' : 'join');
    } else if (currentY < -threshold && currentMode === 'people') {
      action = 'super-like';
    }
    
    if (action) {
      handleSwipe(action);
    } else {
      // Snap back
      card.style.transform = '';
      card.style.opacity = '';
      resetIndicators();
    }

    currentX = 0;
    currentY = 0;
  }

  function handleSwipe(action) {
    const cards = getCurrentCards();
    const currentCard = cards[currentCardIndex];
    
    if (!currentCard) return;

    let direction, rotation;
    if (action === 'pass') {
      direction = -1;
      rotation = -30;
    } else if (action === 'super-like') {
      direction = 0;
      rotation = 0;
    } else {
      direction = 1;
      rotation = 30;
    }

    // Animate card out
    if (action === 'super-like') {
      currentCard.style.transform = `translateY(-100vh) rotate(${rotation}deg)`;
    } else {
      currentCard.style.transform = `translateX(${direction * 100}vw) rotate(${rotation}deg)`;
    }
    currentCard.style.opacity = '0';

    // Send to server
    const userId = currentCard.dataset.userId;
    submitUserSwipe(userId, action);

    setTimeout(() => {
      currentCard.style.display = 'none';
      currentCardIndex++;
      
      if (currentCardIndex >= cards.length) {
        showEmptyState();
      } else {
        initializeSwipe();
      }
      
      resetIndicators();
    }, 300);
  }

  function resetIndicators() {
    document.querySelectorAll('.swipe-indicator').forEach(indicator => {
      indicator.style.opacity = '0';
    });
  }

  function showEmptyState() {
    const activeMode = document.querySelector('.swipe-mode.active');
    const cardsContainer = activeMode.querySelector('.dating-cards-stack');
    const emptyState = activeMode.querySelector('.empty-state');
    
    if (cardsContainer) cardsContainer.style.display = 'none';
    if (emptyState) emptyState.style.display = 'flex';
  }

  function submitUserSwipe(userId, action) {
    let direction;
    if (action === 'pass') {
      direction = 'left';
    } else if (action === 'super-like') {
      direction = 'up';
    } else {
      direction = 'right';
    }

    fetch(`/swipe/user`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
      },
      body: JSON.stringify({
        event_id: <%= @event.id %>,
        swiped_user_id: userId,
        direction: direction
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.match) {
        showMatchModal(data.user.name);
      }
    })
    .catch(error => console.error('Error:', error));
  }

  function showMatchModal(userName) {
    const modal = document.getElementById('matchModal');
    const userNameSpan = document.getElementById('matchedUserName');
    
    userNameSpan.textContent = userName;
    modal.classList.add('show');

    document.getElementById('sendMessage').addEventListener('click', function() {
      window.location.href = '/matches';
    });

    document.getElementById('keepSwiping').addEventListener('click', function() {
      modal.classList.remove('show');
    });
  }

  function updateCardPosition(card, position) {
    if (position === 0) {
      card.style.transform = '';
      card.style.opacity = '1';
      card.style.zIndex = '10';
    } else if (position === 1) {
      card.style.transform = 'scale(0.98) translateY(5px)';
      card.style.opacity = '0.85';
      card.style.zIndex = '9';
    } else {
      card.style.transform = 'scale(0.95) translateY(10px)';
      card.style.opacity = '0.7';
      card.style.zIndex = '8';
    }
  }
</script> 